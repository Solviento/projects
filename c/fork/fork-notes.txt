Taken from Linux fork() introduction

The fork command is generally a way of taking your currently running process and
spawning a new process. Linux has a unique way of doing this: by duplicating the
current process. 

For fork commands, we include

#include <sys/types.h>
#include <unistd.h>

For obtaining process id, we use:

getpid(), usually we cast as (int) when called

For creating a new process, we use

fork(), usually casted as pid_t

Child processes occur when fork() returns 0. Positive return values from fork
means that current process is the parent. Negative return values mean an error
in creating the fork processes. This usually occurs when we are making numerous
forks and go past the limit.

When running child proccesses, we usually make the parent process wait until
all child processes have ended. This can be done by adding a wait(NULL) to the
parent branch. wait(NULL) tells the parent process to wait until its child
processes have finished.

For wait(NULL), we include

#include <sys/wait.h>


