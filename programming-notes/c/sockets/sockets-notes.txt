Taken from Advanced Programming

What is a socket?

It is an endpoint for interprocess communication over TCP/IP networks

Listening sockets vs Connected sockets

HTTP 1.0

The client receives a HTTP request for  a resource on the server


CODE:

For sockets, we must create a reliable, stream socket using TCP

if ( sock = socket(PF_INET, SOCK_STREAM, IPROTO_TCP < 0 )
	die("socket() failed")

In addition:

We construct the server address structure

memset( &echoServAddr, 0, sizeof(echServeAddr)); /*Zero out structure */
echoServAddre.sin_family = AF_INET; 		 /*Internet address family */

echoServAddr.sin_addr.s_addr = inet_addriservIP; /*Server IP address */
echoServAddr.sin_port        = htons(echoServPort); /*Server port */

Establish the connection to the echo server
if ( connect(sock, (struct sockaddr *) &echoServAddr, sizeof(echoServAddr) ) < 0 )
	die("conenct failed")

Determine input length
echoStringLen = strlen(echoString);

Send the string back to the server
if ( send(sock, echoString, echoStringLen, 0) != echoStringLen )
	die("send() sent wrong number of btes than expected")

Receive the same string back from the server
totalBytesRcvd = 0;
printf("Received: ");
while ( totalBytesRcvd < echoStringLen ){
	if (bytesRcvd = recv(sock, echoBuffer, REVBUFSIZE = 1, 0 ) <= 0)
		die(recv() failed or connection closed premateurel);
	
	totalBytesRcvd += bytesRcvd;
	echoBuffer[bytesRcvd] = '\0'
	printf("%s", echoBuffer);
}
printf("\n"); Receive up to the buffer size (minus 1 to leave space for a null terminator)

close(sock);

If we were to build a local address structure to connect to a client, we need bind(), listen() abd clntSock()

Bind to local address
if ( bind(servSock, (struct sockaddr *) &echoServAddr, sizeof(echoServAddr)) < 0)
	die("bind failed")

Mark the socket so it will listen for incoming connections
if ( listen(ServSock, MAXPENDING) <0)
	die("listen() failed);

for (; ;){

	Set the size of the in-out parameter
	clntLen = sizeof(echoClntAddr);

	Wait for a client to connect
	if ( clntSock = accept(servSock, (struct sockaddr *) &echoClntAddr, &clntLen)) < 0)
		die("accept failed");
	
	clntSock is connected to a client!

	printf("Handling client %s \n", 

